/*
 * This file was generated by the Gradle 'init' task, then modified manually
 * LIMITATIONS: must keep dependencies aligned between gradle and maven pom.
 */

plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.6.6'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.6'
    implementation 'org.kie.kogito:kogito-spring-boot-starter:1.37.0.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.6'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
}

group = 'org.acme'
version = '1.0-SNAPSHOT'
description = 'demo20230418'
sourceCompatibility = '11'

// let's orchestrate from Gradle (here) the kogito-maven-plugin by making use of `mvnw`. (if `gradlew` is fine, then `mvnw` ought to be fine too)
task generateKogitoWithMaven(type: Exec) {
    commandLine "./mvnw", "clean", "compile"
}
compileJava.dependsOn generateKogitoWithMaven

// therefore the total set of sources is what generated by Kogito maven plugin, and the source code of this app.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'target/generated-sources/kogito'
        }
    }
}
// pickup the generated dmnDefinitions.json for Swagger/OAS descriptor, and pickup *.dmn_nologic files.
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from ('target/classes/META-INF/resources/') {
        into 'META-INF/resources'
    }
    from ('target/classes') {
        include '**/*.dmn_nologic'
    }
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
